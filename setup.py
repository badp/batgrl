"""Build cython extensions."""

import sys
from itertools import groupby

from Cython.Build import cythonize
from setuptools import setup
from setuptools.command.build_py import build_py
from wcwidth import wcwidth

WIDTHS_FILE_HEADER = """\
\"""
Character widths as generated by wcwidth.

Each tuple in `CHAR_WIDTHS` represents an interval of ords with common width, i.e.,
`(1, 31, 0)` means ords 1 through 31 (inclusive) have width 0. Intervals with width 1
are omitted so if an ord doesn't belong to any interval we can assume it has width 1.
\"""
"""


def make_widths_table():
    """Build char widths file."""
    widths = (
        (codepoint, wcwidth(chr(codepoint))) for codepoint in range(sys.maxunicode + 1)
    )
    grouped = groupby(widths, key=lambda tup: tup[1])
    with open("src/batgrl/_char_widths.py", "w") as file:
        file.write(WIDTHS_FILE_HEADER)
        file.write("\n")
        file.write("CHAR_WIDTHS = (\n")

        for width, group in grouped:
            if width == 1:
                continue
            if width == -1:
                width = 0
            first_codepoint, _ = next(group)
            last_codepoint = first_codepoint
            for last_codepoint, _ in group:
                pass

            file.write(f"    ({first_codepoint}, {last_codepoint}, {width}),\n")
        file.write(")\n")


class build_py_with_char_widths(build_py):
    """Generate width file on build."""

    def run(self):
        """Generate width file on build."""
        super().run()
        make_widths_table()


setup(
    ext_modules=cythonize(["src/batgrl/geometry/regions.pyx"]),
    cmdclass={"build_py": build_py_with_char_widths},
)
